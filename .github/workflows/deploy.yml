name: CI/CD to EBS with pnpm

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Instalar pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Instalar dependencias
        run: pnpm install --frozen-lockfile

      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Compilar NestJS
        run: pnpm run build

      - name: Crear ZIP para deploy
        run: zip -r deploy.zip . -x ".git/*" "node_modules/*" "*.zip"

      - name: Crear bucket S3 si no existe
        run: |
          BUCKET_NAME="backend-nestjs-deploy-bucket"
          if ! aws s3 ls "s3://$BUCKET_NAME" 2>/dev/null; then
            echo "Creando bucket $BUCKET_NAME"
            aws s3 mb "s3://$BUCKET_NAME" --region ${{ secrets.AWS_REGION }}
          else
            echo "Bucket $BUCKET_NAME ya existe"
          fi

      - name: Subir ZIP a S3
        run: |
          aws s3 cp deploy.zip s3://backend-nestjs-deploy-bucket/deploy-${{ github.run_number }}.zip

      - name: Crear aplicación Elastic Beanstalk si no existe
        run: |
          if ! aws elasticbeanstalk describe-applications --application-names backend-api 2>/dev/null | grep -q backend-api; then
            echo "Creando aplicación backend-api"
            aws elasticbeanstalk create-application \
              --application-name backend-api \
              --description "Backend API NestJS"
          else
            echo "Aplicación backend-api ya existe"
          fi

      - name: Crear ambiente si no existe
        run: |
          if ! aws elasticbeanstalk describe-environments --application-name backend-api --environment-names backend-api-env 2>/dev/null | grep -q backend-api-env; then
            echo "Creando ambiente backend-api-env"
            aws elasticbeanstalk create-environment \
              --application-name backend-api \
              --environment-name backend-api-env \
              --solution-stack-name "64bit Amazon Linux 2 v5.8.4 running Node.js 18" \
              --option-settings Namespace=aws:autoscaling:launchconfiguration,OptionName=InstanceType,Value=t3.micro \
              --description "Ambiente de producción para Backend API"
            
            echo "Esperando a que el ambiente esté listo..."
            aws elasticbeanstalk wait environment-ready --application-name backend-api --environment-names backend-api-env
          else
            echo "Ambiente backend-api-env ya existe"
          fi

      - name: Deploy a Elastic Beanstalk
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name backend-api \
            --version-label v-${{ github.run_number }} \
            --source-bundle S3Bucket="backend-nestjs-deploy-bucket",S3Key="deploy-${{ github.run_number }}.zip"

          aws elasticbeanstalk update-environment \
            --environment-name backend-api-env \
            --version-label v-${{ github.run_number }}
